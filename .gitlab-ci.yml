# Project:          Arancino Module
# Author:           Sergio Tomasello <sergio@smartme.io>
# Created:          2018.10.11
# Last Change:      2020.06.05
# Notes:            La pipeline esegue la creazione del pacchetto di Arancino Module e lo carica su repository
#                     La pipeline viene eseguita solo su tag, per evitare il proliferare di pacchetti generati
#                     per ogni push.
# External Vars:    Lista delle variabili definite estarnamente ed usate nella pipeline:
#                   REPO_USR:       nome utente del associato a dev ops per effettuare upload dell'artefatto
#                   REPO_PWD:       password associata all'utente dev ops
#                   REPO_BASE_URL:  url di base del repository: https://packages.smartme.io
#

image: digitalgenius/alpine-python3-pg

stages:
  - start
  - package
  - upload
  - cleanup

#################################
#######       START       #######
#################################

start:
  stage: start

  script:
    - pip3 -v install semantic-version wheel    # Installo le dipendenze semantic-version e wheel
    - python3 check-version.py $CI_COMMIT_TAG   # Genera un file chiamato release.tmp che contiene o "RELEASE" o "SNAPSHOT"
                                                #   in base a come Ã© formato il tag: se il tag:
                                                #   pre-release: test -> SNAPSHOT
                                                #   pre-release: alpha, beta, rc -> RELEASE
                                                #   release -> RELEASE
                                                #
                                                #   es:   "1.0.0-test.3"  -> SNAPSHOT
                                                #         "1.0.0-alpha.1" -> RELEASE
                                                #         "1.0.0-beta.2"  -> RELEASE
                                                #         "1.0.0-rc.1"    -> RELEASE
                                                #         "1.0.0"         -> RELEASE

    - mkdir -p tmp                              # Creo una directory temporanea

    - echo `date +%Y-%m-%d` > tmp/date.txt      # Creo un file di comodo contente la data attuale (di esecuzione della pipeline)
    - echo `date +%H-%M-%S` > tmp/time.txt      # Creo un file di comodo contente l'ora  attuale (di esecuzione della pipeline)
    - mv release.tmp tmp/release.txt            # Sposto il file generato su tmp
    - mv repo_name.tmp tmp/repo_name.txt        # Sposto il file generato su tmp, contiene il nome del repository di destinazione
                                                #   SNAPSHOT -> pypi-snapshot
                                                #   RELEASE -> pypi

  artifacts:
    paths:
      - tmp/
    expire_in: 1d

  only:
    - tags

#################################
#######      PACKAGE      #######
#################################

package:

  stage: package

  script:
    - pip3 -v install semantic-version wheel              # Installo le dipendenze semantic-version e wheel
                                                          # grazie al file repo_name.tmp e release.tmp conosco il tipo
                                                          # di destinazione: RELEASE o SNAPSHOT

    - sed -i "s;^[# ]*\(version * = *\)\(.*\);\1${CI_COMMIT_TAG};" setup.cfg
    - sed -i "s;^[# ]*\(__version__ * = *\)\(.*\);\1'${CI_COMMIT_TAG}';" arancino/version.py

    - python3 setup.py release                            # non si devono fare trucchi, imposto la versione nel setup.py e
                                                          # nei file di cfg a partire dal tag inserito, che DEVE
                                                          # RISPETTARE IL VERSIONAMENTO SEMANTICO 2.0 con nomi di
                                                          # pre-release specificati ne file check_version.py

    - ls dist/ > tmp/pgk_name.txt                         # ottengo il nome del file generato e salvo il nome del
                                                          # pacchetto su file temp

    - mv dist/*.tar.gz tmp/                               # sposto il file su di dir temp.

  dependencies:
    - start

  artifacts:
    paths:
      - tmp/
    expire_in: 1d

  only:
    - tags



#################################
#######       UPLOAD      #######
#################################

upload:

  stage: upload

  variables:
    GIT_STRATEGY: none

  script:

    - PKG_NAME="$(cat tmp/pgk_name.txt)"                  # Recupero il nome del pacchetto
    - REPO_NAME="$(cat tmp/repo_name.txt)"                # Recupero il nome del repository su cui fare upload

    - apk add curl                                        # Installo curl

                                                          # Eseguo upload sul repository specificato (Nexus 3)
    - curl -X POST "${REPO_BASE_URL}/service/rest/v1/components?repository=${REPO_NAME}" -u $REPO_USR:$REPO_PWD -F pypi.asset1=@tmp/$PKG_NAME

  dependencies:
    - package

  only:
    - tags


#################################
#######      CLEANUP      #######
#################################

#######    Cleanup Job    #######
cleanup:

    stage: cleanup

    variables:
        GIT_STRATEGY: none

    script:
        - echo "Cleaning up"
        - rm -rf tmp/

    only:
      - tags
