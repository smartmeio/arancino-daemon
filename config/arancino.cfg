[metadata]

version = 2.0.0


[general]

# ##### NOT USED ######
# Environment type: DEV, PROD. DEV automatically sets: redis.instance_type = VOLATILE, 
# log.level = DEBUG, general.cycle_time = 5 and enables the console handlers
env = PROD


#polling cycle time (in seconds) to discover new ports.
cycle_time = 10


# List of enabled system users who can access protected api.
users = ["me", "root"]


[redis]

# Accetpted values are: VOLATILE, PERSISTENT, VOLATILE_PERSISTENT
instance_type = VOLATILE
;instance_volatile_port = 6379
;instance_persistent_port = 6380
;
;[redis.datastore]
;instance_volatile_db = 0
;instance_persistent_db = 0
;#instance_volatile_persistent_db = 0
;
;[redis.devicestore]
;instance_volatile_db = 1
;instance_persistent_db = 1
;instance_volatile_persistent_db = 0
;
;[redis.datastore_persistant]
;instance_volatile_db = 0
;instance_persistent_db = 0
;instance_volatile_persistent_db = 1

# redis connection attempts: -1 -> no limits, default 5 (every 3 seconds)
connection_attempts = 5

[port]
# folder for firmware to be flashed onto microcontroller.
firmware_path = /tmp/arancino/firmware

# allowed file extensions for firmware
firmware_file_types = ["bin", "hex"]


# default 'arancino port' configuration status
[port.serial]

# automatically enable (and connect) a new discovered port
enabled = True

# set to true to make it not visible in the main device view in the UI
hide = False

# default baudarate
comm_baudrate = 4000000

# baudrate used for 'touch' reset
reset_baudrate = 300

# Filter works with the below list of VID:PID. Accepted filter type are: EXCLUDE, ONLY, ALL
# EXCLUDE: excledus the ones in the list.
# ONLY: acceptes only the ones in the list.
# ALL: no filter, accepts all. This is the default filter type.
filter_type=ALL

# List of VID:PID used to make a filter
filter_list = ["0x04d8:0xecd9", "0x04d8:0xecd9","0x04d8:0xecd9"]

# command to be spawn when upload api is called. The command could have one or more placeholders.
#   available placeholder are: (each attributes of a Port class can used as placeholder)
#
# BASE PORT
#   - port._id
#   - port._device
#   - port._port_type
#   - port._library_version
#   - port._m_b_creation_date
#   - port._m_b_last_usage_date
#   - port._m_s_plugged
#   - port._m_s_connected
#   - port._m_c_enabled
#   - port._m_c_alias
#   - port._m_c_hide
#   - firmware
#
# SERIAL PORT
#   - port.__baudrate = baudrate
#   - port.__timeout = timeout
#   - port.__m_p_vid
#   - port.__m_p_pid
#   - port.__m_p_name
#   - port.__m_p_description
#   - port.__m_p_hwid
#   - port.__m_p_serial_number
#   - port.__m_p_location
#   - port.__m_p_manufacturer
#   - port.__m_p_product
#   - port.__m_p_interface
#
# OTHERS
#   - firmware
upload_command = /usr/bin/run-bossac-cli {port._device} {firmware}


[port.test]
# automatically enable (and connect) a new discovered port
enabled = True

# set to true to make it not visible in the main device view in the UI
hide = True

# Filter works with the below list of VID:PID. Accepted filter type are: EXCLUDE, ONLY, ALL
# EXCLUDE: excledus the ones in the list.
# ONLY: acceptes only the ones in the list.
# ALL: no filter, accepts all. This is the default filter type.
filter_type=ALL

# List of VID:PID used to make a filter
filter_list = []

# the number of port to create for test purpose
num = 1

# prefix of the id generated for the test port
id_template = TESTPORT

# command to be spawn when upload api is called. The command could have one or more placeholders.
upload_command =

[log]
# Accetpted values are: ERROR, WARNING, INFO, DEBUG
level = DEBUG
name = Arancino

# handlers
console = True
file = True

# file handler filenames
log = arancino.log
error = arancino.error.log
stats = arancino.stats.log
