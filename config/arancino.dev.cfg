[general]

#polling cycle time (in seconds) to discover new ports.
cycle_time = 10

#------------------------------------------------------------------------------------------
[redis]

# redis server host of volatile instance
host_volatile = redis-volatile-arancino

# redis server host of persistent instance
host_persistent = redis-persistent-arancino

# redis server port of volatile instance
port_volatile = 6379

# redis server port of persistent instance
port_persistent = 6380

# decode response in redis connection
decode_response = True

# policy for data storage: accepted values are:
# - VOLATILE: all databases are volatile
# - PERSISTENT: all databases are persistent (only in production with two redis instances)
# - VOLATILE_PERSISTENT: data store, reserved key store and time series store are volatile;
#       device store and persistent data store are persistent (only in production with two redis instances).
instance_type = VOLATILE

# redis connection attempts: -1 -> no limits, default 5 (every 3 seconds)
connection_attempts = 5

# time series: Maximum age for samples compared to last event time (in milliseconds)
#   Default: The global retention secs configuration of the database (by default, 0 )
#   When set to 0, the series is not trimmed at all
# - 60000: 1 Minute
# - 3600000: 1 Hour
# - 43200000: 12 Hours
# - 86400000: 1 Day
# - 604800000: 7 Days
retetion = 3600000

#------------------------------------------------------------------------------------------
[redis.volatile]

datastore_std_db = 0
datastore_dev_db = 1
datastore_per_db = 2
datastore_rsvd_db = 3
datastore_tse_db = 4
datastore_tag_db = 5

#------------------------------------------------------------------------------------------
[redis.persistent]

datastore_std_db = 0
datastore_dev_db = 1
datastore_per_db = 2
datastore_rsvd_db = 3
datastore_tse_db = 4
datastore_tag_db = 5

#------------------------------------------------------------------------------------------
[redis.volatile_persistent]

#volatile
datastore_std_db = 0
datastore_rsvd_db = 1
datastore_tse_db = 2

#persistent
datastore_dev_db = 0
datastore_per_db = 1
datastore_tag_db = 2

#------------------------------------------------------------------------------------------
[port]
# folder for firmware to be flashed onto microcontroller.
firmware_path = /tmp/arancino/firmware

# allowed file extensions for firmware
firmware_file_types = ["bin", "hex", "uf2", "zip"]

# reset port on connection
reset_on_connect = True

# reconnection delay after a reset (in seconds)
reset_reconnection_delay = 40

#------------------------------------------------------------------------------------------
[port.serial]
# default 'arancino port' configuration status

# automatically enable (and connect) a new discovered port
enabled = True

# set to true to make it not visible in the main device view in the UI
hide = False

# default baudarate
comm_baudrate = 4000000

# baudrate used for 'touch' reset
reset_baudrate = 300

# Filter works with the below list of VID:PID. Accepted filter type are: EXCLUDE, ONLY, ALL
# EXCLUDE: excledus the ones in the list.
# ONLY: acceptes only the ones in the list.
# ALL: no filter, accepts all. This is the default filter type.

# 0x04D8:0xECD9 Arancino Mignon (SAMD21)
# 0x04D8:0xECDA Arancino (SAMD21)
# 0x1915:0x521F Arancino Volante (NRF52)
# 0x2E8A:0x000A Arancino Pico (RP2040)
# 0x0483 0x5740 Arancino V* (STM32)

filter_type=ALL

# List of VID:PID used to make a filter
filter_list = ["0x04D8:0xECD9", "0x04D8:0xECDA","0x1915:0x521F","0x2E8A:0x000A","0x0483 0x5740"]

# Timeout in seconds in serial connection Min: 1
timeout = 1

# command to be spawn when upload api is called. The command could have one or more placeholders.
#   available placeholder are: (each attributes of a Port class can used as placeholder)
#
# BASE PORT
#   - port._id
#   - port._device
#   - port._port_type
#   - port._library_version
#   - port._m_b_creation_date
#   - port._m_b_last_usage_date
#   - port._m_s_plugged
#   - port._m_s_connected
#   - port._m_c_enabled
#   - port._m_c_alias
#   - port._m_c_hide
#   - firmware
#
# SERIAL PORT
#   - port.__comm_baudrate
#   - port.__reset_baudrate
#   - port.__timeout
#   - port.__m_p_vid
#   - port.__m_p_pid
#   - port.__m_p_name
#   - port.__m_p_description
#   - port.__m_p_hwid
#   - port.__m_p_serial_number
#   - port.__m_p_location
#   - port.__m_p_manufacturer
#   - port.__m_p_product
#   - port.__m_p_interface
#
# OTHERS
#   - firmware

upload_command = /usr/bin/run-arancino-bossac {port._device} {firmware}

# reset port on connection, override the default configuration (can be overrided by the mcu family)
reset_on_connect = True

# reconnection delay after a reset (in seconds)
reset_reconnection_delay = 40

[port.serial.samd21]
upload_command = /usr/bin/run-arancino-bossac {port._device} {firmware}
reset_on_connect = True
reset_reconnection_delay = 5
comm_baudrate = 115200

[port.serial.nrf52]
upload_command = /usr/bin/adafruit-nrfutil dfu serial -pkg {firmware} -p {port._device} -b 115200 --singlebank
reset_on_connect = True
reset_reconnection_delay = 40
comm_baudrate = 256000

[port.serial.stm32]
upload_command = /usr/bin/run-arancino-arduinoSTM32load {port._device} {firmware}
reset_on_connect = True
reset_reconnection_delay = 5
comm_baudrate = 256000

[port.serial.rp20]
upload_command = /usr/bin/run-arancino-uf2conv {port._device} {firmware}
reset_on_connect = True
reset_reconnection_delay = 5
comm_baudrate = 256000

#------------------------------------------------------------------------------------------
[port.test]
# automatically enable (and connect) a new discovered port
enabled = True

# set to true to make it not visible in the main device view in the UI
hide = True

# Filter works with the below list of VID:PID. Accepted filter type are: EXCLUDE, ONLY, ALL
# - EXCLUDE: excledus the ones in the list.
# - ONLY: acceptes only the ones in the list.
# - ALL: no filter, accepts all. This is the default filter type.
filter_type = ALL

# List of VID:PID used to make a filter
filter_list = []

# the number of port to create for test purpose
num = 0

# delay between each command in seconds (accept float). Default 500ms

delay = 5

# prefix of the id generated for the test port
id_template = TESTPORT

# command to be spawn when upload api is called. The command could have one or more placeholders.
upload_command =

# reset port on connection, this override the default configuration
reset_on_connect = False

#------------------------------------------------------------------------------------------
[log]
# Accetpted values are: ERROR, WARNING, INFO, DEBUG
level = DEBUG
name = Arancino

# handlers
handler_console = True
handler_file = True

# Size in MBytes only for file handler. Min: 1, Max: 5, Default: 1
size = 1

# Number of files to use in rotate mode. Min: 1, Max: 10, Default: 1
rotate = 1

# file handler filenames
#file_base = arancino.base.log
file_log = arancino.log
file_error = arancino.error.log
#file_stats = arancino.stats.log

# print stack trace on errors
print_stack_trace = True

#------------------------------------------------------------------------------------------

[transmitter]
# Enable or disable the transmitter module of Arancino
enabled = False

[transmitter.reader]
# Represents the time (in seconds) in which the reader collects data
# and transfers it to the upper level
cycle_time = 10

[transmitter.parser]
class = ParserSimple

# template file used to parse data with the template engine (jinja2)
#   default available templates:
#   - default.yaml.tmpl
#   - default.json.tmpl
#   - default.xml.tmpl

file = default.json.tmpl

[transmitter.parser.simple]
# Configuration for ParserSimple



[transmitter.parser.s4t]
# Configuration for ParserS4T

db_name = db_name

[transmitter.sender]
# Available Senders are: SenderDoNothing, SenderTcpSocket, SenderMqtt, SenderMqttS4T
class = SenderDoNothing

[transmitter.sender.donothing]

[transmitter.sender.tcpsocket]
host = your_host.it
port = 1476

[transmitter.sender.mqtt]
use_tls = False
qos = 1
retain = False

# NOTE: non available at the moment.
# channel parameter can contains placeholder with the using of "{" and "}"
# placeholder can be:
#   - key -> the name of the key that contains the measurements
#   - labels.port_id -> the identifier of the port that provides the measurements
#   - labels.port_type -> the type of the port that provides the measurements
#   - labels.device_id -> the identifier of the device where the ports are connected to. (Note: not always available)
#   - labels.?????

topic = your_topic

# plain
host = your_host.it
port = 1883
username = your_username
password = your_password

# secure
ca_path =
cert_path =
key_path =

[transmitter.sender.mqtts4t]
